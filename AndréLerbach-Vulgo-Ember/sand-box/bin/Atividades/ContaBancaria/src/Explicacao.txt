────┈┈┈┈┈┄┄╌╌╌╌╌╌╌╌╌╌ Classe Objeto ╌╌╌╌╌╌╌╌╌╌╌╌╌┄┄┈┈┈┈┈────

[-------------- Início --------------]
O código começa em ContaBancaria.java;
Note que toda programação orientada a objeto (POO), sempre vai começar com a classe objeto,
Ou seja, seu objeto (normalmente o objeto principal, ou a super classe, que você não precisa entender por enquanto),
Sempre será o primeiro arquivo que você deve criar.

[-------------- Estrutura Inicial --------------]
No código, ele deve iniciar com "package Atividades.ContaBancaria.src";
    O package vai indicar em qual pasta e projeto ele pertence...

    Note o seguinte:
        1.0 - Package é o nome do comando;
        2.0 - Atividades é o nome da pasta principal (que está dentro de src [src siginifica source]);
        3.0 - .ContaBancaria é o nome da classe principal;

    Depois disso, o próprio arquivo já vem com a declaração da classe:
    "public class ContaBancaria";

    Explicando:
        1.0 - "public" quer dizer sobre o encapsulamento da classe, toda classe (na maioria dos casos), ela deve ser pública;
        2.0 - "class" indica que a linha de código se trata de uma classe;
        3.0 - "ContaBancaria" é o nome da classe que, por padrão, deve ser declarada com a primeira letra maiúscula e,
            caso possua mais de uma palavra, ela deve estar junta e também iniciar com letra maúscula (CanetaEsferográfica,CarteiraDeTrabalho);

    Logo a baixo iremos declarar as variáveis desse objeto que nomeamos de ContaBancária

    Explicando:
        1.0 - "String nome" para informar o nome da pessoa que possui a ContaBancaria;
        2.0 - "Double saldo" para informar o saldo ATUAL da ContaBancaria;
        3.0 - "String cpf" variável de informação, só para encher linguiça... // mostrar o cpf da pessoa
        4.0 - "Double dinheiro" para informar o dinheiro QUE VAI ENTRAR na ContaBancaria;

[-------------- Construtor --------------]
    public ContaBancaria(String nome, String cpf){
        this.saldo = 500.00;
        this.nome = nome;
        this.cpf = cpf;
    }

    Explicação:
        — O construtor vai basicamente apontar quais variáveis do objeto serão trabalhados obrigatórios receber.
            De forma resumida e menos complicada, as viaráveis que estão nos parêntesis do construtor, apontam na memória para as
            variáveis declaradas no objeto, onde serão inseridas na instanciação do objeto (Já explico o que é e como instanciamos o objeto);

[-------------- Métodos --------------]
    Explicação:
        1.0 - public diz respeito ao encapsulamento (explicação na linha 22);
        2.0 - void é o tipo de retorno do método, nesse caso, ele não retorna nenhum valor (não precisa entender sobre isso agora);
        3.0 - nome do método;
        4.0 - O valor entre parentesis é o argumento, que, de forma porcamente resumida, é um valor que necessita entrar para que o método funcione;

────┈┈┈┈┈┄┄╌╌╌╌╌╌╌╌╌╌ Explicação de Cada Método ╌╌╌╌╌╌╌╌╌╌╌╌╌┄┄┈┈┈┈┈────

[-------------- Método DEPOSITAR --------------]
    public void depositar(Double dinheiro){
        System.out.println("Depositando: "+dinheiro);
        System.out.print("Saldo Atual: ");
        System.out.println(saldo+dinheiro);
    }

    Explicação:
        — Como já expliquei a estrutura de um método, aqui vou explicar como o método funciona;
        — Nesse método em específico, eu coloquei o arguemnto "Double dinheiro" para que
            Quando o método for "chamado" na classe principal, você seja obrigado a colocar um valor no parentesis,
            facilitando (e não precisando de um scanner) para coletar valores;

                Por exemplo:
                jarvis.depositar(200.0);
                    jarvis é o nome da classe
                    .depositar é o método a ser utilizado
                    (200.0) é o valor que a variável dinheiro vai receber;
                Retorno:
                Depositando: 200.0
                Saldo atual: 700.0 // (Vai ser 700.0, pois no construtor, o saldo inicial foi declarado já como 500.0 [linha 38]);

[-------------- Método SACAR --------------]
    public void sacar(Double dinheiro){
        if (saldo-dinheiro <= 0){
            System.out.println("Saldo indisponível para saque");
        } else {
            System.out.println(saldo-dinheiro);
        }
    }

    Explicação:
        — Nesse método, será feito o saque da conta (reduzir o valor de saldo), no método anterior foi feito o depósito (aumentar o valor de saldo);
        — A diferença do outro para esse, é que, o valor de dinheiro precisa ser o valor que a variável saldo irá perder,
            mas o problema não é apenas esse, quase nenhum banco te permite ter a conta-corrente com saldo negativo,
            então eteremos de utilizar uma condicional. Nesse caso eu escolhi fazer por if/else;

        if (condição){
            o que será feito;
        } else {
            o que será feito caso falso;
        }

        — Nesse caso, caso, caso o calculo para o saque for menor ou igual a 0, o código não irá permitir a redução do valor;
        — Caso contrário, será feito a redução do valor (sim, você pode retornar operações com println em várias linguagens,
         fazemos isso para reduzir linhas de código, mas não é uma boa prática);


[-------------- Método INFO --------------]
    public void info() {
        System.out.println("\n Nome: "+nome+
                            "\n CPF: "+cpf+
                            "\n Saldo: "+saldo);
    }

    Explicação:
        — Se você conseguiu entender os métodos anteriores, você já deve saber que este faz;
        — Falando especificamente do que o professor não explicou para a turma...
            O "sout/sys/qualquer coisa que faça o System.out.prinln()
            Possui formas diferentes de ser utilizado e, nesse caso, normalmente utilizado para reduzir linhas de código,
            pode ser feito sout("\n texto:" +variável);
            O "\n" indica para pular uma linha, nesse caso, você pode criar um único sout/sys para "retornar"(no sentido de aparecer no console)
            Para retonar vários valores de uma vez só!



────┈┈┈┈┈┄┄╌╌╌╌╌╌╌╌╌╌ CLASSE PRINCIPAL ╌╌╌╌╌╌╌╌╌╌╌╌╌┄┄┈┈┈┈┈────

[-------------- Início --------------]
Como o nosso professor não explicou isso (até o momento desse arquivo...),
Para você conseguir diferenciar uma classe objeto de uma classe principal (normalmente no começo, existem casos e casos),
sempre procure pela linha de código:

        public static void main(String[] args){}

    Explicação:
        1.0 - public é o encapsulamento (explicação na linha: 21)
        2.0 - static indicar que uma variável, método ou bloco pertence à classe (nesse caso a classe principal),
            e não a instâncias específicas dessa classe // Difícil de entender, né? Não precisa entender isso por enquanto;
        3.0 - main é o nome do método que a JVM (Java Virtual Machine) procura como ponto de entrada para a execução do programa;

    Observações: JVM (Java Virtual Machine) é uma máquina virtual, de forma burramente resumida, é um simulador de uma máquina física,
        mas como um software, sem depender de hadware.

    JVM - Java Virtual Machine.
    Antes da criação do java, era comum os devs programarem em C, mas o C precisa de uma máqui física para processar informações,
        e, por causa disso, o código que você fez só poderia ser utilizado naquele sistema operacional específico (já se perguntou
        por que existem aplicativos que só rodam em Windows, mas não rodam em MAC e Linux? É por causa disso!).
    O java foi lançado com a JVM, para que, quando um código fosse feito em Sistema Operacional, bastava instalar o java nos outros Sistemas,
        para que o mesmo código pudesse ser utilizado em outros sistemas operacionais, justamente porque o Java
        possui uma máquina virutal, que não depende de hardwares específicos para ser executado.
    (Ao decorrer das aulas, eu falarei mais sobre JSE, JDK e JVM);

[-------------- Instanciando um Objeto --------------]
    ContaBancaria jarvis = new ContaBancaria("Jarvis", "123.456.789-01" );

    Explicação:
        1.0 - ContaBancaria indica a classe que será instanciada;
        2.0 - javris indica o nome que o objeto irá receber (todo método precisará desse nome antes de ser "chamado");
        3.0 - = new ContaBancaria(atributos) é a instanciação da classe, nesse caso, o objeto.

    Acredito que nessa altura, você já deve estar mais familiarizado em como a POO funciona,
    caso não, relaxe... Existem cursos na Udemy, todo mês a Udemy faz um descondo,
    em que todos os cursos ficam por quase 40 reais, então aproveitem para
    estudar a programação estruturada pela Udemy (EM JAVA, PELO AMOR DE DEUS).

[-------------- Método INFO --------------]
    jarvis.info();

    Explicação:
        1.0 - javis é o nome do objeto que queremos acessar;
        2.0 - .info() é o método que iremos executar;
    retorno:
        Nome: Jarvis
        CPF: 123.456.789-01
        Saldo: 500.0

[-------------- Método DEPOSITAR --------------]
    jarvis.depositar(200.0);

    Explicação:
        1.0 - javis é o nome do objeto;
        2.0 - .depositar(200.0) é o método a ser executado, lembrando que nessa parte precisamos
            inserir o arugmento (que é o valor a ser adicionado na variável saldo)
    retorno:
    Depositando: 200.0
    Saldo Atual: 700.0

[-------------- Método SACAR --------------]
    jarvis.sacar(900.0);

    Explicação:
        1.0 - javis é... Você já sabe;
        2.0 - .sacar(900.0) é... Você também já sabe...
        3.0 - MAS, nesse caso, lembra que no método sacar(Double dinheiro),
            nós fizemos uma condicional? Então, ela vai atuar aqui!
            Quando o método for chamado com o valor acima da valor da variável saldo,
            como 900.0 é um valor acima de 700 (alteração feita no método depositar [explicação na linha 174 até 182]),
            ele vai retornar a condição que fizemos, nesse caso...
    retorno:
    Saldo indisponível para saque

    Observação:
        Caso o método "jarvis.sacar();" utilizasse como argumento um valor menor de saldo,
        O código será retornado de outra forma, por exemplo:

    jarvis.sacar(300.0);
    retorno:
    200.0

    Espero que o exercício tenha ficado mais fácil de entender
    Bons estudos!

                          ####
                        ######
                      ########
                    ##########
                    ##########
                  ############
                ##############
                ############################
    ########    ############################
    ########    ############################
    ########    ############################
    ########    ############################
    ########    ############################
    ########    ##########################
    ########    ########################
    ########    ########################
    ########    ######################
    ########    ######################